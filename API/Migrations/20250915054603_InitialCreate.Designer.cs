// <auto-generated />
using System;
using IceAndStone.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IceAndStone.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250915054603_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("IceAndStone.API.Entities.Achievement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Team scores first points in a game",
                            Name = "Icebreaker",
                            TriggerType = "round"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Team scores maximum points in a round",
                            Name = "Mighty Mjolnir",
                            TriggerType = "round"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Team scores max points in 3 consecutive rounds",
                            Name = "Lucky Loki",
                            TriggerType = "round"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Team completes 5+ games in a session",
                            Name = "Looking for Leif",
                            TriggerType = "session"
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Team scores zero in a game",
                            Name = "Niflheim’s Touch",
                            TriggerType = "session"
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Win all games in a session with at least 5 games",
                            Name = "Odin’s Offspring",
                            TriggerType = "session"
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Win 1 game",
                            Name = "Appointed Housecarl",
                            TriggerType = "session"
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Win 2 consecutive games",
                            Name = "Dubbed Thane",
                            TriggerType = "session"
                        },
                        new
                        {
                            Id = 9L,
                            Description = "Win 3 consecutive games",
                            Name = "Promoted to Jarl",
                            TriggerType = "session"
                        },
                        new
                        {
                            Id = 10L,
                            Description = "Win 5 consecutive games",
                            Name = "Coronated King",
                            TriggerType = "session"
                        });
                });

            modelBuilder.Entity("IceAndStone.API.Entities.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TargetRounds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("IceAndStone.API.Entities.Lane", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("LaneNumber")
                        .HasColumnType("int");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VenueId", "LaneNumber")
                        .IsUnique();

                    b.ToTable("Lanes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LaneNumber = 1,
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            LaneNumber = 2,
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            LaneNumber = 1,
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            LaneNumber = 2,
                            VenueId = 2L
                        });
                });

            modelBuilder.Entity("IceAndStone.API.Entities.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("IceAndStone.API.Entities.Round", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("StartsFirstTeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameId", "Number")
                        .IsUnique();

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("IceAndStone.API.Entities.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("LaneId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LaneId", "StartTime");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("IceAndStone.API.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasFirstRound")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameId", "Colour")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("IceAndStone.API.Entities.TeamAchievement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AchievedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("AchievementId")
                        .HasColumnType("bigint");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("GameId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamAchievements");
                });

            modelBuilder.Entity("IceAndStone.API.Entities.TeamScore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("RoundId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("RoundId", "TeamId")
                        .IsUnique();

                    b.ToTable("TeamScores");
                });

            modelBuilder.Entity("IceAndStone.API.Entities.Venue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Midgard Curling Yard"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Frostfang Arena"
                        });
                });

            modelBuilder.Entity("IceAndStone.API.Entities.Game", b =>
                {
                    b.HasOne("IceAndStone.API.Entities.Session", null)
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IceAndStone.API.Entities.Lane", b =>
                {
                    b.HasOne("IceAndStone.API.Entities.Venue", null)
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IceAndStone.API.Entities.Player", b =>
                {
                    b.HasOne("IceAndStone.API.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IceAndStone.API.Entities.Round", b =>
                {
                    b.HasOne("IceAndStone.API.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IceAndStone.API.Entities.Session", b =>
                {
                    b.HasOne("IceAndStone.API.Entities.Lane", null)
                        .WithMany()
                        .HasForeignKey("LaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IceAndStone.API.Entities.Team", b =>
                {
                    b.HasOne("IceAndStone.API.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IceAndStone.API.Entities.TeamAchievement", b =>
                {
                    b.HasOne("IceAndStone.API.Entities.Achievement", null)
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IceAndStone.API.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IceAndStone.API.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IceAndStone.API.Entities.TeamScore", b =>
                {
                    b.HasOne("IceAndStone.API.Entities.Round", null)
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IceAndStone.API.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
